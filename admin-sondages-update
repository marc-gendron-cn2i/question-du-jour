<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <title>Créer une question du jour</title>
  <link href="https://fonts.googleapis.com/css2?family=Red+Hat+Display:wght@400;700&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Red Hat Display', sans-serif;
      max-width: 600px;
      margin: 3rem auto;
      padding: 1rem;
      background: #f8f8f8;
    }
    h1 {
      color: #d51D2C;
    }
    label {
      display: block;
      margin-top: 1rem;
      font-weight: 600;
    }
    input[type="text"], input[type="date"], input[type="time"], textarea {
      width: 100%;
      padding: 0.5rem;
      border: 1px solid #ccc;
      border-radius: 6px;
      font-family: 'Red Hat Display', sans-serif;
    }
    .option-input {
      margin-bottom: 0.5rem;
    }
    button {
      margin-top: 1.5rem;
      background: #d51D2C;
      color: white;
      border: none;
      padding: 10px 20px;
      font-size: 16px;
      border-radius: 6px;
      cursor: pointer;
    }
    .message {
      margin-top: 1rem;
      font-weight: 600;
      color: green;
    }
    #formattedDate {
      margin-top: 0.3rem;
      font-size: 0.9rem;
      color: #333;
    }
  </style>

  <script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/11.8.1/firebase-app.js";
    import { getFirestore, doc, setDoc, getDoc } from "https://www.gstatic.com/firebasejs/11.8.1/firebase-firestore.js";

    const firebaseConfig = {
      apiKey: "AIzaSyDMJGl7E0O_Q2Tj7GPRM0XQTyJ4N6Wph2A",
      authDomain: "question-du-jour-d1a22.firebaseapp.com",
      projectId: "question-du-jour-d1a22",
      storageBucket: "question-du-jour-d1a22.firebasestorage.app",
      messagingSenderId: "113783715054",
      appId: "1:113783715054:web:0fdc415506e644e338afff",
      measurementId: "G-RQ1WYGTWS3"
    };

    const app = initializeApp(firebaseConfig);
    const db = getFirestore(app);

    function toFRDate(isoDate) {
      const [yyyy, mm, dd] = isoDate.split('-');
      return `${dd}-${mm}-${yyyy}`;
    }

    document.addEventListener('DOMContentLoaded', () => {
      const form = document.getElementById('pollForm');
      const message = document.getElementById('successMessage');
      const optionsContainer = document.getElementById('optionsContainer');
      const addOptionButton = document.getElementById('addOption');
      const dateInput = document.getElementById('date');
      const formattedDate = document.getElementById('formattedDate');

      const updateOptionInputs = () => {
        const currentInputs = optionsContainer.querySelectorAll('input.option-input');
        addOptionButton.disabled = currentInputs.length >= 8;
      };

      addOptionButton.addEventListener('click', () => {
        const currentInputs = optionsContainer.querySelectorAll('input.option-input');
        if (currentInputs.length < 8) {
          const input = document.createElement('input');
          input.type = 'text';
          input.placeholder = `Option ${currentInputs.length + 1}`;
          input.className = 'option-input';
          input.required = true;
          optionsContainer.appendChild(input);
          updateOptionInputs();
        }
      });

      // Initialisation : 2 champs option
      for (let i = 0; i < 2; i++) {
        const input = document.createElement('input');
        input.type = 'text';
        input.placeholder = `Option ${i + 1}`;
        input.className = 'option-input';
        input.required = true;
        optionsContainer.appendChild(input);
      }

      updateOptionInputs();

      dateInput.addEventListener('change', async () => {
        const isoDate = dateInput.value;
        if (!isoDate) return;

        formattedDate.textContent = `Date sélectionnée : ${toFRDate(isoDate)}`;

        const pollRef = doc(db, "polls", isoDate);
        const snapshot = await getDoc(pollRef);

        if (snapshot.exists()) {
          const data = snapshot.data();
          document.getElementById('question').value = data.question || '';
          document.getElementById('startTime').value = data.startTime?.substring(11, 16) || '00:00';
          document.getElementById('endTime').value = data.endTime?.substring(11, 16) || '23:59';

          optionsContainer.innerHTML = '';
          data.options.forEach((opt, idx) => {
            const input = document.createElement('input');
            input.type = 'text';
            input.className = 'option-input';
            input.placeholder = `Option ${idx + 1}`;
            input.required = true;
            input.value = opt;
            optionsContainer.appendChild(input);
          });
          updateOptionInputs();
        }
      });

      form.onsubmit = async (e) => {
        e.preventDefault();

        const isoDate = dateInput.value;
        if (!isoDate) {
          alert("Veuillez sélectionner une date.");
          return;
        }

        const question = document.getElementById('question').value;
        const startTime = document.getElementById('startTime').value;
        const endTime = document.getElementById('endTime').value;

        const options = Array.from(optionsContainer.querySelectorAll('input.option-input'))
          .map(opt => opt.value.trim())
          .filter(Boolean);

        if (options.length < 2) {
          alert("Veuillez entrer au moins deux options.");
          return;
        }

        const startDateTime = new Date(`${isoDate}T${startTime}`);
        const endDateTime = new Date(`${isoDate}T${endTime}`);

        if (startDateTime >= endDateTime) {
          alert("L'heure de fin doit être après l'heure de début.");
          return;
        }

        const pollRef = doc(db, "polls", isoDate);
        await setDoc(pollRef, {
          question,
          options,
          votes: Array(options.length).fill(0),
          startTime: startDateTime.toISOString(),
          endTime: endDateTime.toISOString()
        });

        form.reset();
        formattedDate.textContent = '';
        optionsContainer.innerHTML = '';
        for (let i = 0; i < 2; i++) {
          const input = document.createElement('input');
          input.type = 'text';
          input.placeholder = `Option ${i + 1}`;
          input.className = 'option-input';
          input.required = true;
          optionsContainer.appendChild(input);
        }

        updateOptionInputs();
        message.textContent = `Sondage créé ou mis à jour pour le ${toFRDate(isoDate)}`;
      };
    });
  </script>
</head>
<body>
  <h1>Créer une question du jour</h1>
  <form id="pollForm">
    <label for="date">Date</label>
    <input type="date" id="date" required>
    <small id="formattedDate"></small>

    <label for="startTime">Heure de début</label>
    <input type="time" id="startTime" required value="00:00">

    <label for="endTime">Heure de fin</label>
    <input type="time" id="endTime" required value="23:59">

    <label for="question">Question</label>
    <textarea id="question" rows="2" required placeholder="Quelle est votre saison préférée ?"></textarea>

    <label>Options de réponse (2 à 8)</label>
    <div id="optionsContainer"></div>
    <button type="button" id="addOption">Ajouter une option</button>

    <button type="submit">Créer / Mettre à jour</button>
    <div class="message" id="successMessage"></div>
  </form>
</body>
</html>
